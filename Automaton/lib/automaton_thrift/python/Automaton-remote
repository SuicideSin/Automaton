#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Automaton
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string registerService(string appname)'
  print '  void unregisterService(string serviceid)'
  print '  void registerPlugin(string serviceid, string name)'
  print '  void unregisterPlugin(string serviceid, string name)'
  print '  string execute(string serviceid, string name, string arguments)'
  print '  string interpret(string serviceid, string raw)'
  print '  bool isPlugin(string name)'
  print '   getAvailablePlugins()'
  print '  string pluginUsage(string name)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Automaton.Client(protocol)
transport.open()

if cmd == 'registerService':
  if len(args) != 1:
    print 'registerService requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerService(args[0],))

elif cmd == 'unregisterService':
  if len(args) != 1:
    print 'unregisterService requires 1 args'
    sys.exit(1)
  pp.pprint(client.unregisterService(args[0],))

elif cmd == 'registerPlugin':
  if len(args) != 2:
    print 'registerPlugin requires 2 args'
    sys.exit(1)
  pp.pprint(client.registerPlugin(args[0],args[1],))

elif cmd == 'unregisterPlugin':
  if len(args) != 2:
    print 'unregisterPlugin requires 2 args'
    sys.exit(1)
  pp.pprint(client.unregisterPlugin(args[0],args[1],))

elif cmd == 'execute':
  if len(args) != 3:
    print 'execute requires 3 args'
    sys.exit(1)
  pp.pprint(client.execute(args[0],args[1],args[2],))

elif cmd == 'interpret':
  if len(args) != 2:
    print 'interpret requires 2 args'
    sys.exit(1)
  pp.pprint(client.interpret(args[0],args[1],))

elif cmd == 'isPlugin':
  if len(args) != 1:
    print 'isPlugin requires 1 args'
    sys.exit(1)
  pp.pprint(client.isPlugin(args[0],))

elif cmd == 'getAvailablePlugins':
  if len(args) != 0:
    print 'getAvailablePlugins requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAvailablePlugins())

elif cmd == 'pluginUsage':
  if len(args) != 1:
    print 'pluginUsage requires 1 args'
    sys.exit(1)
  pp.pprint(client.pluginUsage(args[0],))

transport.close()
